(load "../Libs/mathfunctions.lisp")
(load "../Libs/inputoutput.lisp")

(defun get-ordered-prime-factors-list(number)
  (let ((prime-factors-list (list)) (prime-factors-hash (get-prime-factors-for-number number)))
    (if (null prime-factors-hash)
	(setq prime-factors-list (cons (list (abs number) 1) prime-factors-list))
      (progn
	(loop for v being the hash-values of prime-factors-hash using (hash-key k)
	      do (setq prime-factors-list (cons (list k v) prime-factors-list)))
	(sort prime-factors-list #'< :key #'cadr)))
    (return-from get-ordered-prime-factors-list prime-factors-list)))

(defun main()
  (let ((first) (second)) ; declare the variables here for a better overview
    (setq first (request-integer-input-with-condition "Enter the first number: " #'(lambda(val)(setq isDifferent (/= val 0))) "The number should be different from 0. Please try again"))
    (unless (null first)
      (setq second (request-integer-input-with-condition "Enter the second number: " #'(lambda(val)(setq isDifferent (/= val 0))) "The number should be different from 0. Please try again")))
    (if (not (null second))
	(let ((prime-factors-of-first-number (get-ordered-prime-factors-list first)) (prime-factors-of-second-number (get-ordered-prime-factors-list second)) (gcd (greatest-common-divisor-prime-factors first second)) (lcm (least-common-multiple-prime-factors first second)))
	  (terpri)
	  (format t "Prime factors for first number (absolute values): ~a~%" prime-factors-of-first-number)
	  (format t "Prime factors for second number (absolute values): ~a~%" prime-factors-of-second-number)
	  (terpri)
	  (format t "The greatest common divisor of ~d and ~d is: ~d~%" first second gcd)
          (when (= gcd 1)
	    (write-line "The numbers are prime among each other!"))
	  (format t "The lowest common multiple of ~d and ~d is: ~d~%" first second lcm))
      (write-line "You quit"))))

(main)
