(load "../Libs/parse.lisp")
(load "../Libs/mathfunctions.lisp")

(defun requestInput(message)
  (check-type message string)
  (setq result nil)
  (loop
   (princ message)
   (setq input (read-line))
   (setq input (string-left-trim " " input))
   (setq input (string-right-trim " " input))
   (cond ((= (length input) 0) (return))
	 ((isStringInteger input) (setq result (parse-integer input)) (if (> result 1) (return) (write-line "The number should be greater than 1. Please try again")))
	 (t (write-line "Invalid number. It should be an integer. Please try again"))))
  (return-from requestInput result))

(defun main()
  (setq primesList (list))
  (setq left (requestInput "Enter the left interval margin: "))
  (setq right nil)
  (when (not (null left))
    (setq right (requestInput "Enter the right interval margin: ")))
  (cond ((null right) (write-line "You quit"))
	(t (cond ((> left right) (setq temp left) (setq left right) (setq right temp)))
	   (terpri)
	   (princ "Retrieving prime numbers from interval: ")
	   (cond ((< left right) (format t "[~d; ~d]~%~%" left right) (setq primesList (getPrimeNumbers right left)))
		 (t (format t "[~d; ~d]~%~%" firstRelevantPrime right) (setq primesList (getPrimeNumbers left)))) ; //equal margins, only one threshold, display prime numbers starting with 2
	   (princ "Done!")
	   (terpri)
	   (terpri)
	   (if (= (length primesList) 0)
	       (write-line "There are no prime numbers within this interval!")
	     (format t "Found following prime numbers: ~%~%~a~%~%~d numbers found~%" primesList (length primesList)))
	   )))

(main)
