(load "../Libs/mathfunctions.lisp")
(load "../Libs/inputoutput.lisp")

(defun main()
  (let ((matrix-order) (first-parameter) (second-parameter) (third-parameter) (fourth-parameter))
    (setq matrix-order (request-integer-input-with-condition "Enter the requested size order for the Fibonacci matrix (press ENTER to quit): " #'(lambda(val)(let ((is-greater)) (setq is-greater (> val 0)))) "The number should be strictly positive. Please try again"))
    (unless (null matrix-order)
      (setq first-parameter (request-integer-input-with-condition "Enter the first parameter f[0][0] (press ENTER to quit): " #'(lambda(val) (let ((is-greater)) (setq is-greater (>= val 0)))) "The number should not be negative. Please try again")))
    (unless (null first-parameter)
      (setq second-parameter (request-integer-input-with-condition "Enter the second parameter f[0][1] (press ENTER to quit): " #'(lambda(val) (let ((is-greater)) (setq is-greater (> val first-parameter)))) (concatenate 'string "The number should be greater than " (write-to-string first-parameter) ". Please try again"))))
    (unless (null second-parameter)
      (setq third-parameter (request-integer-input-with-condition "Enter the third parameter f[1][0] (press ENTER to quit): " #'(lambda(val)(let ((is-greater)) (setq is-greater (> val first-parameter)))) (concatenate 'string "The number should be greater than " (write-to-string first-parameter) ". Please try again"))))
    (unless (null third-parameter)
      (setq fourth-parameter (request-integer-input-with-condition "Enter the third parameter f[1][1] (press ENTER to quit): " #'(lambda(val)(let ((is-greater)) (setq is-greater (> val first-parameter)))) (concatenate 'string "The number should be greater than " (write-to-string first-parameter) ". Please try again"))))
    (if (not (null fourth-parameter))
	(progn
	  (terpri)
	  (princ "The resulting Fibonacci matrix is: ")
	  (terpri)
	  (print (get-fibonacci-matrix matrix-order (list first-parameter second-parameter third-parameter fourth-parameter))))
      (write-line "You quit"))))

(main)
