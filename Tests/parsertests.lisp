(load "../Libs/parse.lisp")

(defconstant +epsilon1+ (expt 10 -6)) ; used for integer or decimal arguments

(define-test test-convert-to-integer
  (assert-true (= (convertStringToInt "0") 0))
  (assert-true (= (convertStringToInt "00") 0))
  (assert-true (= (convertStringToInt "-12") -12))
  (assert-true (= (convertStringToInt "45") 45))
  (assert-true (= (convertStringToInt "0014") 14))
  (assert-true (= (convertStringToInt "-0015") -15))
  (assert-true (= (convertStringToInt "-0023456000078") -23456000078))
  (assert-true (= (convertStringToInt "0000444455967") 444455967))
)

(define-test test-cannot-convert-to-integer
  (assert-false (convertStringToInt "a"))
  (assert-false (convertStringToInt "-1b"))
  (assert-false (convertStringToInt "1 2"))
  (assert-false (convertStringToInt ""))
  (assert-false (convertStringToInt ".12"))
  (assert-false (convertStringToInt " 1"))
  (assert-false (convertStringToInt "-2 "))
  (assert-false (convertStringToInt "1+2"))
  (assert-false (convertStringToInt "1-23"))
)

(define-test test-convert-to-float
  (assert-true (<= (abs (- 2.345678000001 (convertStringToFloat "2.345678000001"))) +epsilon1+))
  (assert-true (<= (abs (- -1.8954 (convertStringToFloat "-1.8954"))) +epsilon1+))
  (assert-true (<= (abs (- 12.0 (convertStringToFloat "12"))) +epsilon1+))
  (assert-true (<= (abs (- -4.0 (convertStringToFloat "-4"))) +epsilon1+))
  (assert-true (<= (abs (- 0.0 (convertStringToFloat "0"))) +epsilon1+))
  (assert-true (<= (abs (- 0.0 (convertStringToFloat "0.0"))) +epsilon1+))
  (assert-true (<= (abs (- 0.0 (convertStringToFloat "-0"))) +epsilon1+))
  (assert-true (<= (abs (- 0.0 (convertStringToFloat "-0.00"))) +epsilon1+))
  (assert-true (<= (abs (- 11.0 (convertStringToFloat "11.000"))) +epsilon1+))
  (assert-true (<= (abs (- 1.2354 (convertStringToFloat "01.2354"))) +epsilon1+))
  (assert-true (<= (abs (- -2.4501 (convertStringToFloat "-02.450100"))) +epsilon1+))
  (assert-true (<= (abs (- 4.0 (convertStringToFloat "8/2"))) +epsilon1+))
  (assert-true (<= (abs (- -5.0 (convertStringToFloat "10/-2"))) +epsilon1+))
  (assert-true (<= (abs (- -3.0 (convertStringToFloat "-9/3"))) +epsilon1+))
  (assert-true (<= (abs (- 7.0 (convertStringToFloat "-49/-7"))) +epsilon1+))
  (assert-true (= 2/5 (convertStringToFloat "2/5")))
  (assert-true (= -1/3 (convertStringToFloat "1/-3")))
  (assert-true (= -2/3 (convertStringToFloat "-2/3")))
  (assert-true (= 6/7 (convertStringToFloat "-6/-7")))
  (assert-true (= 7/5 (convertStringToFloat "28/20")))
)

(define-test test-cannot-convert-to-float
  (assert-false (convertStringToFloat "a.5"))
  (assert-false (convertStringToFloat "-5.a"))
  (assert-false (convertStringToFloat "b"))
  (assert-false (convertStringToFloat "1.5.2"))
  (assert-false (convertStringToFloat "-.5"))
  (assert-false (convertStringToFloat "-5-"))
  (assert-false (convertStringToFloat " 5.2"))
  (assert-false (convertStringToFloat "-5. 25"))
  (assert-false (convertStringToFloat "2.25 "))
  (assert-false (convertStringToFloat ".22"))
  (assert-false (convertStringToFloat ""))
  (assert-false (convertStringToFloat " "))
  (assert-false (convertStringToFloat "12/0"))
  (assert-false (convertStringToFloat "0/0"))
  (assert-false (convertStringToFloat "-12/000"))
  (assert-false (convertStringToFloat "12/-00"))
  (assert-false (convertStringToFloat "1a/-2"))
  (assert-false (convertStringToFloat "-2/5a"))
  (assert-false (convertStringToFloat "-2/5/4"))
  (assert-false (convertStringToFloat "2//-5"))
  (assert-false (convertStringToFloat "2.5/4"))
  (assert-false (convertStringToFloat "-2/5.6"))
  (assert-false (convertStringToFloat "3/5+6"))
  (assert-false (convertStringToFloat "3/50/6"))
  (assert-false (convertStringToFloat "/38"))
)
