(load "../Libs/parse.lisp")

(defconstant +epsilon-1+ (expt 10 -6)) ; used for integer or decimal arguments

(define-test test-convert-to-integer
  (assert-true (= (convert-string-to-integer "0") 0))
  (assert-true (= (convert-string-to-integer "00") 0))
  (assert-true (= (convert-string-to-integer "-12") -12))
  (assert-true (= (convert-string-to-integer "45") 45))
  (assert-true (= (convert-string-to-integer "0014") 14))
  (assert-true (= (convert-string-to-integer "-0015") -15))
  (assert-true (= (convert-string-to-integer "-0023456000078") -23456000078))
  (assert-true (= (convert-string-to-integer "0000444455967") 444455967))
)

(define-test test-cannot-convert-to-integer
  (assert-false (convert-string-to-integer "a"))
  (assert-false (convert-string-to-integer "-1b"))
  (assert-false (convert-string-to-integer "1 2"))
  (assert-false (convert-string-to-integer ""))
  (assert-false (convert-string-to-integer ".12"))
  (assert-false (convert-string-to-integer " 1"))
  (assert-false (convert-string-to-integer "-2 "))
  (assert-false (convert-string-to-integer "1+2"))
  (assert-false (convert-string-to-integer "1-23"))
)

(define-test test-convert-to-float
  (assert-true (<= (abs (- 2.345678000001 (convert-string-to-float "2.345678000001"))) +epsilon-1+))
  (assert-true (<= (abs (- -1.8954 (convert-string-to-float "-1.8954"))) +epsilon-1+))
  (assert-true (<= (abs (- 12.0 (convert-string-to-float "12"))) +epsilon-1+))
  (assert-true (<= (abs (- -4.0 (convert-string-to-float "-4"))) +epsilon-1+))
  (assert-true (<= (abs (- 0.0 (convert-string-to-float "0"))) +epsilon-1+))
  (assert-true (<= (abs (- 0.0 (convert-string-to-float "0.0"))) +epsilon-1+))
  (assert-true (<= (abs (- 0.0 (convert-string-to-float "-0"))) +epsilon-1+))
  (assert-true (<= (abs (- 0.0 (convert-string-to-float "-0.00"))) +epsilon-1+))
  (assert-true (<= (abs (- 11.0 (convert-string-to-float "11.000"))) +epsilon-1+))
  (assert-true (<= (abs (- 1.2354 (convert-string-to-float "01.2354"))) +epsilon-1+))
  (assert-true (<= (abs (- -2.4501 (convert-string-to-float "-02.450100"))) +epsilon-1+))
  (assert-true (<= (abs (- 4.0 (convert-string-to-float "8/2"))) +epsilon-1+))
  (assert-true (<= (abs (- -5.0 (convert-string-to-float "10/-2"))) +epsilon-1+))
  (assert-true (<= (abs (- -3.0 (convert-string-to-float "-9/3"))) +epsilon-1+))
  (assert-true (<= (abs (- 7.0 (convert-string-to-float "-49/-7"))) +epsilon-1+))
  (assert-true (= 2/5 (convert-string-to-float "2/5")))
  (assert-true (= -1/3 (convert-string-to-float "1/-3")))
  (assert-true (= -2/3 (convert-string-to-float "-2/3")))
  (assert-true (= 6/7 (convert-string-to-float "-6/-7")))
  (assert-true (= 7/5 (convert-string-to-float "28/20")))
)

(define-test test-cannot-convert-to-float
  (assert-false (convert-string-to-float "a.5"))
  (assert-false (convert-string-to-float "-5.a"))
  (assert-false (convert-string-to-float "b"))
  (assert-false (convert-string-to-float "1.5.2"))
  (assert-false (convert-string-to-float "-.5"))
  (assert-false (convert-string-to-float "-5-"))
  (assert-false (convert-string-to-float " 5.2"))
  (assert-false (convert-string-to-float "-5. 25"))
  (assert-false (convert-string-to-float "2.25 "))
  (assert-false (convert-string-to-float ".22"))
  (assert-false (convert-string-to-float ""))
  (assert-false (convert-string-to-float " "))
  (assert-false (convert-string-to-float "12/0"))
  (assert-false (convert-string-to-float "0/0"))
  (assert-false (convert-string-to-float "-12/000"))
  (assert-false (convert-string-to-float "12/-00"))
  (assert-false (convert-string-to-float "1a/-2"))
  (assert-false (convert-string-to-float "-2/5a"))
  (assert-false (convert-string-to-float "-2/5/4"))
  (assert-false (convert-string-to-float "2//-5"))
  (assert-false (convert-string-to-float "2.5/4"))
  (assert-false (convert-string-to-float "-2/5.6"))
  (assert-false (convert-string-to-float "3/5+6"))
  (assert-false (convert-string-to-float "3/50/6"))
  (assert-false (convert-string-to-float "/38"))
)
