(load "../Libs/mathfunctions.lisp")

(define-test test-greatest-common-divisor
  (assert-equal (greatest-common-divisor 6 10) 2)
  (assert-equal (greatest-common-divisor -10 -6) 2)
  (assert-equal (greatest-common-divisor 20 8) 4)
  (assert-equal (greatest-common-divisor -8 20) 4)
  (assert-equal (greatest-common-divisor 15 32) 1)
  (assert-equal (greatest-common-divisor 4 4) 4)
  (assert-equal (greatest-common-divisor -1 1) 1)
  (assert-equal (greatest-common-divisor 17 19) 1)
  (assert-equal (greatest-common-divisor -30 15) 15)
)

(define-test test-greatest-common-divisor-prime-factors
  (assert-equal (greatest-common-divisor-prime-factors 6 10) 2)
  (assert-equal (greatest-common-divisor-prime-factors -10 -6) 2)
  (assert-equal (greatest-common-divisor-prime-factors 20 8) 4)
  (assert-equal (greatest-common-divisor-prime-factors -8 20) 4)
  (assert-equal (greatest-common-divisor-prime-factors 15 32) 1)
  (assert-equal (greatest-common-divisor-prime-factors 4 4) 4)
  (assert-equal (greatest-common-divisor-prime-factors -1 1) 1)
  (assert-equal (greatest-common-divisor-prime-factors 17 19) 1)
  (assert-equal (greatest-common-divisor-prime-factors -30 15) 15)
  (assert-equal (greatest-common-divisor-prime-factors 7 -14) 7)
  (assert-equal (greatest-common-divisor-prime-factors 7 4) 1)
  (assert-equal (greatest-common-divisor-prime-factors 14 7) 7)
  (assert-equal (greatest-common-divisor-prime-factors -4 7) 1)
  (assert-equal (greatest-common-divisor-prime-factors 7 -7) 7)
)

(define-test test-least-common-multiple-prime-factors
  (assert-equal (least-common-multiple-prime-factors 6 10) 30)
  (assert-equal (least-common-multiple-prime-factors -10 -6) 30)
  (assert-equal (least-common-multiple-prime-factors 20 -8) 40)
  (assert-equal (least-common-multiple-prime-factors -8 20) 40)
  (assert-equal (least-common-multiple-prime-factors 15 32) 480)
  (assert-equal (least-common-multiple-prime-factors 4 4) 4)
  (assert-equal (least-common-multiple-prime-factors -1 1) 1)
  (assert-equal (least-common-multiple-prime-factors 17 19) 323)
  (assert-equal (least-common-multiple-prime-factors -30 15) 30)
  (assert-equal (least-common-multiple-prime-factors 7 -14) 14)
  (assert-equal (least-common-multiple-prime-factors 7 4) 28)
  (assert-equal (least-common-multiple-prime-factors 14 7) 14)
  (assert-equal (least-common-multiple-prime-factors -4 7) 28)
  (assert-equal (least-common-multiple-prime-factors 7 -7) 7)
  (assert-equal (least-common-multiple-prime-factors 1620 1512) 22680)
  (assert-equal (least-common-multiple-prime-factors 180 -525) 6300)
)

(define-test test-prime-numbers-in-interval
  (assert-true (equalp (get-prime-numbers 2) #(2)))
  (assert-true (equalp (get-prime-numbers 10) #(2 3 5 7)))
  (assert-true (equalp (get-prime-numbers 20 2) #(2 3 5 7 11 13 17 19)))
  (assert-true (equalp (get-prime-numbers 16 14) #()))
  (assert-true (equalp (get-prime-numbers 50 20) #(23 29 31 37 41 43 47)))
  (assert-true (equalp (get-prime-numbers 17 3) #(3 5 7 11 13 17)))
  (assert-true (equalp (get-prime-numbers 17) #(2 3 5 7 11 13 17)))
  (assert-true (equalp (get-prime-numbers 20 11) #(11 13 17 19)))
)

(define-test test-prime-factors
  (assert-false (get-prime-factors-for-number 1))
  (assert-false (get-prime-factors-for-number 2))
  (assert-false (get-prime-factors-for-number 7))

  (let ((prime-factors (get-prime-factors-for-number 6)))
    (assert-true (= (gethash 2 prime-factors) 1)) ; assert-equal doesn't seem to work in these cases
    (assert-true (= (gethash 3 prime-factors) 1)))

  (let ((prime-factors (get-prime-factors-for-number 384)))
    (assert-true (= (gethash 2 prime-factors) 7))
    (assert-true (= (gethash 3 prime-factors) 1)))

  (let ((prime-factors (get-prime-factors-for-number 2500)))
    (assert-true (= (gethash 2 prime-factors) 2))
    (assert-true (= (gethash 5 prime-factors) 4)))
)

(define-test test-fibonacci-matrix
  (assert-true (equalp (get-fibonacci-matrix 5 '(2 3 5 4)) #2A((2 3 5 8 13) (5 4 9 13 22) (7 7 6 13 19) (12 11 15 10 25) (19 18 21 23 16))))
  (assert-true (equalp (get-fibonacci-matrix 2 '(2 3 5 4)) #2A((2 3) (5 4))))
  (assert-true (equalp (get-fibonacci-matrix 1 '(2 3 5 4)) #2A((2))))
  (assert-true (equalp (get-fibonacci-matrix 5) #2A((0 1 1 2 3) (1 1 2 3 5) (1 2 1 3 4) (2 3 3 2 5) (3 5 4 5 3))))
  (assert-true (equalp (get-fibonacci-matrix 2) #2A((0 1) (1 1))))
  (assert-true (equalp (get-fibonacci-matrix 1) #2A((0))))
  (assert-true (equalp (get-fibonacci-matrix 10 '(0 3 2 4)) ; test a (user given) "0" initial parameter too (corner case)
		       #2A((0 3 3 6 9 15 24 39 63 102)
			   (2 4 6 10 16 26 42 68 110 178)
			   (2 7 4 11 15 26 41 67 108 175)
			   (4 11 10 8 18 26 44 70 114 184)
			   (6 18 14 19 12 31 43 74 117 191)
			   (10 29 24 27 30 20 50 70 120 190)
			   (16 47 38 46 42 51 32 83 115 198)
			   (26 76 62 73 72 71 82 52 134 186)
			   (42 123 100 119 114 122 114 135 84 219)
			   (68 199 162 192 186 193 196 187 218 136))))
  (assert-true (equalp (get-fibonacci-matrix 2 '(0 3 2 4)) #2A((0 3) (2 4))))
  (assert-true (equalp (get-fibonacci-matrix 1 '(0 3 2 4)) #2A((0))))
)
